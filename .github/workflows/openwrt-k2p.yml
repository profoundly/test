name: Build OpenWrt Firmware for PHICOMM K2P

on:
  repository_dispatch:
  workflow_dispatch:
  # schedule:
  #   - cron: 0 20 * * *

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  FEEDS_CONF: feeds.conf.default
  CONFIG_FILE: .config
  TZ: Asia/Shanghai

jobs:

  build_openwrt_firmware:

    name: Build OpenWrt Firmware

    runs-on: ubuntu-18.04

    # defaults:
    #   run:
    #     working-directory: k2p

    if: github.event.repository.owner.id == github.event.sender.id

    steps:

      - name: Checkout
        uses: actions/checkout@main

      # - name: Initialize environment
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     pwd
      #     ls -alh
      #     echo $GITHUB_WORKSPACE
      #     sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
      #     sudo -E apt-get update
      #     sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf wget swig rsync libtinfo5
      #     sudo -E apt-get -y autoremove --purge
      #     sudo -E apt-get clean
      #     sudo timedatectl set-timezone "$TZ"

      # - name: Download source code
      #   run: git clone $REPO_URL -b $REPO_BRANCH openwrt

      # - name: Load custom feeds
      #   run: [ -f $FEEDS_CONF ] && mv $FEEDS_CONF openwrt/feeds.conf.default

      # - name: Update feeds
      #   run: cd openwrt && ./scripts/feeds update -a

      # - name: Install feeds
      #   run: cd openwrt && ./scripts/feeds install -a

      # - name: Load custom configuration
      #   run: [ -f $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config

      # - name: Download package
      #   run: |
      #     cd openwrt
      #     make defconfig
      #     make download -j8
      #     find dl -size -1024c -exec ls -l {} \;
      #     find dl -size -1024c -exec rm -f {} \;

      # - name: Compile the firmware
      #   run: |
      #     cd openwrt
      #     echo -e "Compile with $(nproc) thread(s)"
      #     make -j$(nproc) || make -j1 || make -j1 V=s
      #     echo "::set-output name=status::success"
      #     grep '^CONFIG_TARGET.*DEVICE.*=y' .config | sed -r 's/.*DEVICE_(.*)=y/\1/' > DEVICE_NAME
      #     [ -s DEVICE_NAME ] && echo "DEVICE_NAME=_$(cat DEVICE_NAME)" >> $GITHUB_ENV
      #     echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

      - name: ServerChan Notify
        uses: yakumioto/serverchan-action@v1
        with:
          key: ${{ secrets.SCKEY }}
          text: Compilation work is over
          desp: See ($GITHUB_REPOSITORY)[https://github.com/$GITHUB_REPOSITORY]

      - name: Bark Notify
        uses: shink/bark-action@v1
        with:
          key: ${{ secrets.BARK_KEY }}
          title: Compilation work is over
          desp: See https://github.com/$GITHUB_REPOSITORY

      # - name: Space cleanup
      #   env:
      #     DEBIAN_FRONTEND: noninteractive
      #   run: |
      #     docker rmi `docker images -q`
      #     sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d
      #     sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
      #     sudo -E apt-get update
      #     sudo -E apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler antlr3 gperf swig
      #     sudo -E apt-get -y autoremove --purge
      #     sudo -E apt-get clean

      #     df -h

      # - name: Update feeds
      #   run: |
      #     sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
      #     ./scripts/feeds update -a
      #     ./scripts/feeds install -a

      # - name: Generate configuration file
      #   run: make defconfig

      # - name: Make download
      #   run: |
      #     make download -j8
      #     find dl -size -1024c -exec rm -f {} \;

      # - name: Compile firmware
      #   run: |
      #     make -j$(nproc) || make -j1 V=s
      #     echo "======================="
      #     echo "Space usage:"
      #     echo "======================="
      #     df -h
      #     echo "======================="
      #     du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
      #     du -h --max-depth=1 ./build_dir
      #     du -h --max-depth=1 ./bin

      # - name: Prepare artifact
      #   run: |
      #     mkdir -p ./artifact/firmware
      #     mkdir -p ./artifact/package
      #     mkdir -p ./artifact/buildinfo
      #     rm -rf $(find ./bin/targets/ -type d -name "packages")
      #     cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
      #     cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
      #     cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      # - name: Deliver buildinfo
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: OpenWrt_buildinfo
      #     path: ./artifact/buildinfo/

      # - name: Deliver package
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: OpenWrt_package
      #     path: ./artifact/package/

      # - name: Deliver firmware
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: OpenWrt_firmware
      #     path: ./bin/targets/

      # - name: Upload release asset
      #   if: github.event == 'release'
      #   uses: svenstaro/upload-release-action@v2
      #   with:
      #     repo_token: ${{ secrets.YOURTOKEN }}
      #     file: ./artifact/firmware/*
      #     tag: ${{ github.ref }}
      #     file_glob: true
